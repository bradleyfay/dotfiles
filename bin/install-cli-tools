#!/usr/bin/env bash

# Modern CLI Tools Installation Script
# Installs modern Rust-based alternatives to traditional Unix tools
# Optimized for macOS

set -e  # Exit on error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Homebrew is installed
check_homebrew() {
    if ! command -v brew &> /dev/null; then
        print_error "Homebrew is not installed!"
        print_info "Please install Homebrew first: https://brew.sh"
        print_info "Run: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
        exit 1
    fi
    print_success "Homebrew is installed"
}

# Check if a tool is already installed
is_installed() {
    brew list "$1" &> /dev/null
}

# Install a tool if not already installed
install_tool() {
    local tool=$1
    local description=$2

    if is_installed "$tool"; then
        print_warning "$tool is already installed (skipping)"
    else
        print_info "Installing $tool - $description"
        if brew install "$tool"; then
            print_success "$tool installed successfully"
        else
            print_error "Failed to install $tool"
        fi
    fi
}

echo "=================================="
echo "Modern CLI Tools Installer"
echo "=================================="
echo ""

# Check prerequisites
print_info "Checking prerequisites..."
check_homebrew
echo ""

# Update Homebrew
print_info "Updating Homebrew..."
brew update
echo ""

# Core search and file tools
print_info "Installing core search and file tools..."
install_tool "ripgrep" "Fast grep alternative (rg)"
install_tool "fd" "Fast and intuitive find alternative"
install_tool "bat" "Cat with syntax highlighting"
install_tool "eza" "Modern ls replacement"
install_tool "zoxide" "Smarter cd that learns your habits"
echo ""

# System monitoring tools
print_info "Installing system monitoring tools..."
install_tool "bottom" "Modern top/htop alternative (btm)"
install_tool "procs" "Modern ps replacement"
echo ""

# Trash utility
print_info "Installing trash utility..."
install_tool "trash" "Safe rm alternative (moves files to trash)"
echo ""

# Additional useful tools
print_info "Installing additional useful tools..."
install_tool "sd" "Intuitive sed alternative"
install_tool "dust" "Intuitive du alternative"
install_tool "hyperfine" "Command-line benchmarking tool"
install_tool "tokei" "Fast code statistics"
echo ""

# Summary
echo "=================================="
echo "Installation Complete!"
echo "=================================="
echo ""
echo "Installed tools and their commands:"
echo "  • ripgrep      → rg         (faster grep)"
echo "  • fd           → fd         (faster find)"
echo "  • bat          → bat        (better cat)"
echo "  • eza          → eza        (better ls)"
echo "  • zoxide       → z/zi       (smarter cd)"
echo "  • bottom       → btm        (better top)"
echo "  • procs        → procs      (better ps)"
echo "  • trash        → trash      (safe rm)"
echo "  • sd           → sd         (better sed)"
echo "  • dust         → dust       (better du)"
echo "  • hyperfine    → hyperfine  (benchmarking)"
echo "  • tokei        → tokei      (code stats)"
echo ""
echo "Next steps:"
echo "  1. Add zoxide to your shell - run: 'zoxide init bash' (or zsh/fish)"
echo "  2. Try out the new commands!"
echo "  3. Consider adding aliases to your ~/.bashrc or ~/.zshrc:"
echo ""
echo "     # Suggested aliases"
echo "     alias cat='bat'"
echo "     alias ls='eza'"
echo "     alias ll='eza -la'"
echo "     alias find='fd'"
echo "     alias grep='rg'"
echo "     alias top='btm'"
echo "     alias ps='procs'"
echo "     alias rm='echo \"Use trash instead of rm. To force rm, use: \\\\rm\"'"
echo ""
echo "     # Initialize zoxide"
echo "     eval \"\$(zoxide init bash)\"  # or zsh/fish"
echo ""
