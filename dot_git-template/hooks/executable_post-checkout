#!/bin/bash
# Post-checkout hook: Runs after git checkout
# 1. Cleans build artifacts when switching branches
# 2. Auto-initializes pre-commit configuration if it doesn't exist

PREV_HEAD=$1
NEW_HEAD=$2
BRANCH_CHECKOUT=$3

# ==============================================================================
# Clean build artifacts when switching branches
# ==============================================================================
if [ "$BRANCH_CHECKOUT" = "1" ]; then
    echo "ðŸ§¹ Cleaning build artifacts..."

    # Python artifacts
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null
    find . -type f -name "*.pyc" -delete 2>/dev/null
    find . -type f -name "*.pyo" -delete 2>/dev/null
    find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null
    find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null
    find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null

    # Node/JavaScript artifacts (skip node_modules)
    find . -type d -name ".next" -maxdepth 2 -not -path "*/node_modules/*" -exec rm -rf {} + 2>/dev/null
    find . -type d -name "dist" -maxdepth 2 -not -path "*/node_modules/*" -exec rm -rf {} + 2>/dev/null
    find . -type d -name "build" -maxdepth 2 -not -path "*/node_modules/*" -exec rm -rf {} + 2>/dev/null

    # General cache directories
    find . -type d -name ".cache" -exec rm -rf {} + 2>/dev/null

    echo "âœ“ Build artifacts cleaned"
fi

# ==============================================================================
# Auto-initialize pre-commit configuration
# ==============================================================================

if [ -f .pre-commit-config.yaml ]; then
    # Repo has pre-commit config - try to install hooks
    if command -v pre-commit &> /dev/null; then
        if pre-commit install --install-hooks -f >/dev/null 2>&1; then
            :  # Silent success
        else
            echo "âš  Pre-commit found but hook installation needs attention"
            echo "  Run: pre-commit install --install-hooks"
        fi
    else
        echo "â„¹ Repository uses pre-commit, but 'pre-commit' command not found"
        echo "  Install with: brew install pre-commit"
    fi
elif [ ! -f .pre-commit-config.yaml ]; then
    # No pre-commit config - offer to create one
    if [ "$BRANCH_CHECKOUT" = "1" ]; then
        # Only show on branch checkouts, not on initial clone
        echo "â„¹ No .pre-commit-config.yaml found in this repository"
        echo "  Create one with: pre-commit init-templatedir ~/.git-template"
        echo "  Or run: pre-commit sample-config > .pre-commit-config.yaml"
    fi
fi
